swagger: "2.0"
info:
  title: "Haumana API"
  description: "API for Haumana app cloud sync functionality"
  version: "1.0.0"
host: "YOUR_API_ID.execute-api.us-west-2.amazonaws.com"
basePath: "/prod"
schemes:
  - "https"
securityDefinitions:
  CognitoUserPool:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      type: "cognito_user_pools"
      providerARNs:
        - "arn:aws:cognito-idp:us-west-2:YOUR_ACCOUNT_ID:userpool/YOUR_USER_POOL_ID"
paths:
  /pieces:
    post:
      summary: "Sync pieces"
      description: "Synchronize pieces between client and cloud"
      security:
        - CognitoUserPool: []
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              operation:
                type: "string"
                enum: ["sync", "upload", "download"]
              pieces:
                type: "array"
                items:
                  type: "object"
              lastSyncedAt:
                type: "string"
      responses:
        "200":
          description: "Successful sync"
          schema:
            type: "object"
            properties:
              syncedAt:
                type: "string"
              uploadedPieces:
                type: "array"
                items:
                  type: "string"
              serverPieces:
                type: "array"
                items:
                  type: "object"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:YOUR_ACCOUNT_ID:function:haumana-sync-pieces/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      summary: "CORS support"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "CORS headers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /sessions:
    post:
      summary: "Upload practice sessions"
      description: "Upload practice sessions to cloud storage"
      security:
        - CognitoUserPool: []
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              sessions:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sessionId:
                      type: "string"
                    pieceId:
                      type: "string"
                    startedAt:
                      type: "string"
                    endedAt:
                      type: "string"
      responses:
        "200":
          description: "Sessions uploaded successfully"
          schema:
            type: "object"
            properties:
              uploadedSessions:
                type: "array"
                items:
                  type: "string"
              syncedAt:
                type: "string"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:YOUR_ACCOUNT_ID:function:haumana-sync-sessions/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      summary: "CORS support"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "CORS headers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"