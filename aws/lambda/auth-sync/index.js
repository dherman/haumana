"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const google_auth_library_1 = require("google-auth-library");
const cognitoClient = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({ region: process.env.AWS_REGION });
// Accept both Web and iOS client IDs
const validClientIds = [
    process.env.GOOGLE_CLIENT_ID || '', // Web client ID
    '872799888201-rdv0c48nup16mo4b19jjred0jgpjoltc.apps.googleusercontent.com' // iOS client ID
].filter(id => id !== '');
const googleClient = new google_auth_library_1.OAuth2Client();
const handler = async (event) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    try {
        // Parse request body
        const body = JSON.parse(event.body || '{}');
        if (!body.googleIdToken) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Missing googleIdToken' }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }
        // Verify Google token - accept multiple valid client IDs
        const ticket = await googleClient.verifyIdToken({
            idToken: body.googleIdToken,
            audience: validClientIds
        });
        const payload = ticket.getPayload();
        if (!payload || !payload.email_verified) {
            return {
                statusCode: 401,
                body: JSON.stringify({ error: 'Invalid or unverified Google token' }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }
        // Create or update user in Cognito User Pool
        const username = `google_${payload.sub}`;
        const userPoolId = process.env.USER_POOL_ID;
        try {
            // Check if user exists
            await cognitoClient.send(new client_cognito_identity_provider_1.AdminGetUserCommand({
                UserPoolId: userPoolId,
                Username: username
            }));
            // User exists, update attributes
            await cognitoClient.send(new client_cognito_identity_provider_1.AdminUpdateUserAttributesCommand({
                UserPoolId: userPoolId,
                Username: username,
                UserAttributes: [
                    { Name: 'email', Value: payload.email },
                    { Name: 'email_verified', Value: 'true' },
                    { Name: 'name', Value: payload.name || '' },
                    { Name: 'picture', Value: payload.picture || '' },
                    { Name: 'updated_at', Value: Math.floor(Date.now() / 1000).toString() } // Unix timestamp in seconds
                ]
            }));
            console.log('Updated existing user:', username);
        }
        catch (error) {
            if (error.name === 'UserNotFoundException') {
                // User doesn't exist, create new user
                await cognitoClient.send(new client_cognito_identity_provider_1.AdminCreateUserCommand({
                    UserPoolId: userPoolId,
                    Username: username,
                    UserAttributes: [
                        { Name: 'email', Value: payload.email },
                        { Name: 'email_verified', Value: 'true' },
                        { Name: 'name', Value: payload.name || '' },
                        { Name: 'picture', Value: payload.picture || '' }
                        // Note: 'sub' is auto-generated by Cognito and cannot be set
                    ],
                    MessageAction: 'SUPPRESS' // Don't send welcome email
                }));
                console.log('Created new user:', username);
            }
            else {
                throw error;
            }
        }
        // Return success with user info
        return {
            statusCode: 200,
            body: JSON.stringify({
                success: true,
                user: {
                    id: payload.sub,
                    email: payload.email,
                    name: payload.name,
                    picture: payload.picture,
                    username: username
                },
                identityId: body.identityId
            }),
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        };
    }
    catch (error) {
        console.error('Error in auth sync:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: 'Internal server error',
                message: error instanceof Error ? error.message : 'Unknown error'
            }),
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        };
    }
};
exports.handler = handler;
